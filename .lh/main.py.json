{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1729242351456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729242361424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,60 @@\n             break\r\n     return code\r\n \r\n @app.route(\"/\", methods=[\"POST\", \"GET\"])\r\n+def home():\r\n+    session.clear()  # Clear session when accessing home page\r\n \r\n+    if request.method == \"POST\":\r\n+        name = request.form.get(\"name\")\r\n+        code = request.form.get(\"code\")\r\n+        join = request.form.get(\"join\", False)\r\n+        create = request.form.get(\"create\", False)\r\n \r\n+        # DEBUG: Print name and code from form submission\r\n+        print(f\"Form Submitted - Name: {name}, Code: {code}, Join: {join}, Create: {create}\")\r\n+\r\n+        # Check if a name is provided\r\n+        if not name:\r\n+            return render_template(\"home.html\", error=\"Please enter a name.\", code=code, name=name)\r\n+\r\n+        # If joining an existing room, a code must be provided\r\n+        if join and not code:\r\n+            return render_template(\"home.html\", error=\"Please enter a room code.\", code=code, name=name)\r\n+\r\n+        # Room creation\r\n+        if create:\r\n+            room = generate_unique_code(4)  # Generate a 4-letter room code\r\n+            rooms[room] = {\"members\": 0, \"messages\": []}  # Initialize room data\r\n+            session[\"room\"] = room  # Store room in session\r\n+            session[\"name\"] = name  # Store name in session\r\n+            \r\n+            # DEBUG: Check if room was created\r\n+            print(f\"Room created: {room}\")\r\n+            \r\n+            # Create the shareable link for the room\r\n+            shareable_link = request.host_url + \"room/\" + room\r\n+            return render_template(\"home.html\", code=room, name=name, shareable_link=shareable_link)\r\n+\r\n+        # Room joining\r\n+        if code not in rooms:\r\n+            # DEBUG: Check if room exists when trying to join\r\n+            print(f\"Room '{code}' does not exist when trying to join.\")\r\n+            return render_template(\"home.html\", error=\"Room does not exist.\", code=code, name=name)\r\n+\r\n+        # DEBUG: Check if joining existing room\r\n+        print(f\"Joining room: {code}\")\r\n+\r\n+        # Store room and name in session if the room exists\r\n+        session[\"room\"] = code\r\n+        session[\"name\"] = name\r\n+        return redirect(url_for(\"room\", code=code))\r\n+\r\n+    return render_template(\"home.html\")\r\n+\r\n+\r\n+\r\n @app.route(\"/room/<code>\")\r\n def room(code):\r\n     # Ensure room exists and session is valid\r\n     if \"name\" not in session or code not in rooms:\r\n"
                },
                {
                    "date": 1729242418329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,129 +0,0 @@\n-from flask import Flask, render_template, request, session, redirect, url_for\r\n-from flask_socketio import join_room, leave_room, send, SocketIO\r\n-import random\r\n-from string import ascii_uppercase\r\n-\r\n-app = Flask(__name__)\r\n-app.config[\"SECRET_KEY\"] = \"hjhjsdahhds\"\r\n-socketio = SocketIO(app)\r\n-\r\n-rooms = {}\r\n-\r\n-# Function to generate a unique room code\r\n-def generate_unique_code(length):\r\n-    while True:\r\n-        code = \"\".join(random.choice(ascii_uppercase) for _ in range(length))\r\n-        if code not in rooms:\r\n-            break\r\n-    return code\r\n-\r\n-@app.route(\"/\", methods=[\"POST\", \"GET\"])\r\n-def home():\r\n-    session.clear()  # Clear session when accessing home page\r\n-\r\n-    if request.method == \"POST\":\r\n-        name = request.form.get(\"name\")\r\n-        code = request.form.get(\"code\")\r\n-        join = request.form.get(\"join\", False)\r\n-        create = request.form.get(\"create\", False)\r\n-\r\n-        # Check if a name is provided\r\n-        if not name:\r\n-            return render_template(\"home.html\", error=\"Please enter a name.\", code=code, name=name)\r\n-\r\n-        # If joining an existing room, a code must be provided\r\n-        if join and not code:\r\n-            return render_template(\"home.html\", error=\"Please enter a room code.\", code=code, name=name)\r\n-\r\n-        # Room creation\r\n-        if create:\r\n-            room = generate_unique_code(4)  # Generate a 4-letter room code\r\n-            rooms[room] = {\"members\": 0, \"messages\": []}  # Initialize room data\r\n-            session[\"room\"] = room  # Store room in session\r\n-            session[\"name\"] = name  # Store name in session\r\n-            \r\n-            # DEBUG: Check if room was created\r\n-            print(f\"Room created: {room}\")\r\n-            \r\n-            # Create the shareable link for the room\r\n-            shareable_link = request.host_url + \"room/\" + room\r\n-            return render_template(\"home.html\", code=room, name=name, shareable_link=shareable_link)\r\n-\r\n-        # Room joining\r\n-        if code not in rooms:\r\n-            # DEBUG: Check if room exists when trying to join\r\n-            print(f\"Room '{code}' does not exist when trying to join.\")\r\n-            return render_template(\"home.html\", error=\"Room does not exist.\", code=code, name=name)\r\n-\r\n-        # DEBUG: Check if joining existing room\r\n-        print(f\"Joining room: {code}\")\r\n-\r\n-        # Store room and name in session if the room exists\r\n-        session[\"room\"] = code\r\n-        session[\"name\"] = name\r\n-        return redirect(url_for(\"room\", code=code))\r\n-\r\n-    return render_template(\"home.html\")\r\n-\r\n-@app.route(\"/room/<code>\")\r\n-def room(code):\r\n-    # Ensure room exists and session is valid\r\n-    if \"name\" not in session or code not in rooms:\r\n-        # DEBUG: Check if room exists when trying to access it\r\n-        print(f\"Room '{code}' not found in session or rooms dict.\")\r\n-        return redirect(url_for(\"home\"))\r\n-\r\n-    # DEBUG: Successful room access\r\n-    print(f\"Accessing room: {code}\")\r\n-    \r\n-    session[\"room\"] = code\r\n-    return render_template(\"room.html\", code=code, messages=rooms[code][\"messages\"])\r\n-\r\n-@socketio.on(\"message\")\r\n-def message(data):\r\n-    room = session.get(\"room\")\r\n-    \r\n-    # DEBUG: Print the room from the session\r\n-    print(f\"Message received in room: {room}\")\r\n-    \r\n-    if room not in rooms:\r\n-        # DEBUG: Check if room exists when sending a message\r\n-        print(f\"Room '{room}' does not exist in rooms.\")\r\n-        return\r\n-    \r\n-    content = {\r\n-        \"name\": session.get(\"name\"),\r\n-        \"message\": data[\"data\"]\r\n-    }\r\n-    send(content, to=room)\r\n-    rooms[room][\"messages\"].append(content)\r\n-\r\n-@socketio.on(\"connect\")\r\n-def connect(auth):\r\n-    room = session.get(\"room\")\r\n-    name = session.get(\"name\")\r\n-    if not room or not name:\r\n-        return\r\n-    if room not in rooms:\r\n-        leave_room(room)\r\n-        return\r\n-    \r\n-    join_room(room)\r\n-    send({\"name\": name, \"message\": \"has entered the room\"}, to=room)\r\n-    rooms[room][\"members\"] += 1\r\n-\r\n-@socketio.on(\"disconnect\")\r\n-def disconnect():\r\n-    room = session.get(\"room\")\r\n-    name = session.get(\"name\")\r\n-    leave_room(room)\r\n-\r\n-    if room in rooms:\r\n-        rooms[room][\"members\"] -= 1\r\n-        if rooms[room][\"members\"] <= 0:\r\n-            del rooms[room]\r\n-    \r\n-    send({\"name\": name, \"message\": \"has left the room\"}, to=room)\r\n-\r\n-if __name__ == \"__main__\":\r\n-    socketio.run(app, debug=True)\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1729242351456,
            "name": "Commit-0",
            "content": "from flask import Flask, render_template, request, session, redirect, url_for\r\nfrom flask_socketio import join_room, leave_room, send, SocketIO\r\nimport random\r\nfrom string import ascii_uppercase\r\n\r\napp = Flask(__name__)\r\napp.config[\"SECRET_KEY\"] = \"hjhjsdahhds\"\r\nsocketio = SocketIO(app)\r\n\r\nrooms = {}\r\n\r\n# Function to generate a unique room code\r\ndef generate_unique_code(length):\r\n    while True:\r\n        code = \"\".join(random.choice(ascii_uppercase) for _ in range(length))\r\n        if code not in rooms:\r\n            break\r\n    return code\r\n\r\n@app.route(\"/\", methods=[\"POST\", \"GET\"])\r\n\r\n\r\n@app.route(\"/room/<code>\")\r\ndef room(code):\r\n    # Ensure room exists and session is valid\r\n    if \"name\" not in session or code not in rooms:\r\n        # DEBUG: Check if room exists when trying to access it\r\n        print(f\"Room '{code}' not found in session or rooms dict.\")\r\n        return redirect(url_for(\"home\"))\r\n\r\n    # DEBUG: Successful room access\r\n    print(f\"Accessing room: {code}\")\r\n    \r\n    session[\"room\"] = code\r\n    return render_template(\"room.html\", code=code, messages=rooms[code][\"messages\"])\r\n\r\n@socketio.on(\"message\")\r\ndef message(data):\r\n    room = session.get(\"room\")\r\n    \r\n    # DEBUG: Print the room from the session\r\n    print(f\"Message received in room: {room}\")\r\n    \r\n    if room not in rooms:\r\n        # DEBUG: Check if room exists when sending a message\r\n        print(f\"Room '{room}' does not exist in rooms.\")\r\n        return\r\n    \r\n    content = {\r\n        \"name\": session.get(\"name\"),\r\n        \"message\": data[\"data\"]\r\n    }\r\n    send(content, to=room)\r\n    rooms[room][\"messages\"].append(content)\r\n\r\n@socketio.on(\"connect\")\r\ndef connect(auth):\r\n    room = session.get(\"room\")\r\n    name = session.get(\"name\")\r\n    if not room or not name:\r\n        return\r\n    if room not in rooms:\r\n        leave_room(room)\r\n        return\r\n    \r\n    join_room(room)\r\n    send({\"name\": name, \"message\": \"has entered the room\"}, to=room)\r\n    rooms[room][\"members\"] += 1\r\n\r\n@socketio.on(\"disconnect\")\r\ndef disconnect():\r\n    room = session.get(\"room\")\r\n    name = session.get(\"name\")\r\n    leave_room(room)\r\n\r\n    if room in rooms:\r\n        rooms[room][\"members\"] -= 1\r\n        if rooms[room][\"members\"] <= 0:\r\n            del rooms[room]\r\n    \r\n    send({\"name\": name, \"message\": \"has left the room\"}, to=room)\r\n\r\nif __name__ == \"__main__\":\r\n    socketio.run(app, debug=True)\r\n"
        }
    ]
}